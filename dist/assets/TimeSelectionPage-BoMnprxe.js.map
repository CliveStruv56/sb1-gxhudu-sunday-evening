{"version":3,"file":"TimeSelectionPage-BoMnprxe.js","sources":["../../src/components/TimeSelection.tsx","../../src/components/TimeSelectionPage.tsx"],"sourcesContent":["import React from 'react';\nimport { format, addDays, setHours, setMinutes, isAfter, addMinutes, isBefore, startOfDay } from 'date-fns';\nimport { useSettingsStore } from '../store/settingsStore';\nimport { TimeSlot } from '../types';\n\ninterface TimeSelectionProps {\n  onConfirm: (date: Date, time: string) => void;\n}\n\nexport const TimeSelection: React.FC<TimeSelectionProps> = ({ onConfirm }) => {\n  const [selectedDate, setSelectedDate] = React.useState<Date | null>(null);\n  const [selectedTime, setSelectedTime] = React.useState<string>('');\n  const [isConfirmed, setIsConfirmed] = React.useState(false);\n  const { settings } = useSettingsStore();\n\n  React.useEffect(() => {\n    useSettingsStore.getState().fetchSettings();\n  }, []);\n\n  const getTimeSlots = React.useCallback((date: Date): TimeSlot[] => {\n    const slots: TimeSlot[] = [];\n    const openingTime = setHours(setMinutes(date, 45), 10); // 10:45\n    const closingTime = setHours(setMinutes(date, 30), 15); // 15:30\n    let currentSlot = openingTime;\n\n    // Add 15 minutes lead time to current time\n    const minimumTime = addMinutes(new Date(), 15);\n\n    while (isAfter(closingTime, currentSlot)) {\n      const slotTime = format(currentSlot, 'HH:mm');\n      const slotDate = new Date(date);\n      const [hours, minutes] = slotTime.split(':').map(Number);\n      slotDate.setHours(hours, minutes, 0, 0);\n\n      // Only add slot if it's in the future (considering lead time)\n      if (isAfter(slotDate, minimumTime)) {\n        slots.push({\n          time: slotTime,\n          available: true\n        });\n      }\n\n      currentSlot = addMinutes(currentSlot, 15);\n    }\n\n    return slots;\n  }, []);\n\n  const isDateAvailable = React.useCallback((date: Date): boolean => {\n    if (!settings) return false;\n\n    // Check if date is blocked\n    const dateStr = format(date, 'yyyy-MM-dd');\n    if (settings.blockedDates.includes(dateStr)) return false;\n\n    // Check if all slots for this date are in the past\n    const slots = getTimeSlots(date);\n    if (slots.length === 0) return false;\n\n    return true;\n  }, [settings, getTimeSlots]);\n\n  const dates = React.useMemo(() => {\n    const now = new Date();\n    const availableDates = [];\n    let currentDate = now;\n    let daysChecked = 0;\n    \n    // Keep checking days until we find 8 available ones or check 30 days max\n    while (availableDates.length < 8 && daysChecked < 30) {\n      const day = currentDate.getDay();\n      // Check if it's Thursday (4) through Sunday (0)\n      const isValidDay = day === 4 || day === 5 || day === 6 || day === 0;\n      \n      if (isValidDay && isDateAvailable(currentDate)) {\n        availableDates.push({\n          date: new Date(currentDate),\n          isToday: format(currentDate, 'yyyy-MM-dd') === format(now, 'yyyy-MM-dd')\n        });\n      }\n      \n      currentDate = addDays(currentDate, 1);\n      daysChecked++;\n    }\n\n    return availableDates;\n  }, [isDateAvailable]);\n\n  const handleConfirm = () => {\n    if (selectedDate && selectedTime) {\n      onConfirm(selectedDate, selectedTime);\n      setIsConfirmed(true);\n    }\n  };\n\n  const handleReset = () => {\n    setSelectedDate(null);\n    setSelectedTime('');\n    setIsConfirmed(false);\n  };\n\n  if (!settings) {\n    return (\n      <div className=\"flex justify-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <h2 className=\"text-2xl font-bold mb-6\">Select Collection Date and Time</h2>\n\n      {/* Date Selection */}\n      <div className=\"mb-6\">\n        <h3 className=\"text-lg font-semibold mb-3\">Select Date:</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n          {dates.map(({ date, isToday }) => (\n            <button\n              key={date.toISOString()}\n              onClick={() => {\n                setSelectedDate(date);\n                setSelectedTime(''); // Reset time when date changes\n                setIsConfirmed(false);\n              }}\n              className={`p-3 rounded-lg border transition-colors ${\n                selectedDate?.toDateString() === date.toDateString()\n                  ? 'bg-blue-600 text-white'\n                  : 'hover:bg-gray-50'\n              }`}\n            >\n              <div className=\"flex flex-col items-center\">\n                <span>{format(date, 'EEE, MMM d')}</span>\n                {isToday && (\n                  <span className=\"text-xs mt-1 font-medium text-green-600\">Today</span>\n                )}\n              </div>\n            </button>\n          ))}\n        </div>\n        {dates.length === 0 && (\n          <p className=\"text-center text-gray-500 mt-4\">\n            No available dates for collection. Please check back later.\n          </p>\n        )}\n      </div>\n\n      {/* Time Selection */}\n      {selectedDate && (\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-semibold mb-3\">Select Time:</h3>\n          <div className=\"grid grid-cols-3 md:grid-cols-6 gap-3\">\n            {getTimeSlots(selectedDate).map(({ time, available }) => (\n              <button\n                key={time}\n                onClick={() => {\n                  if (available) {\n                    setSelectedTime(time);\n                    setIsConfirmed(false);\n                  }\n                }}\n                disabled={!available}\n                className={`p-2 rounded-lg border ${\n                  selectedTime === time\n                    ? 'bg-blue-600 text-white'\n                    : available\n                    ? 'hover:bg-gray-50'\n                    : 'bg-gray-100 text-gray-400 cursor-not-allowed'\n                }`}\n              >\n                {time}\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Action Buttons */}\n      <div className=\"flex gap-4 mb-6\">\n        <button\n          onClick={handleConfirm}\n          disabled={!selectedDate || !selectedTime}\n          className={`flex-1 py-3 px-4 rounded-lg text-white transition-colors ${\n            isConfirmed \n              ? 'bg-green-700 hover:bg-green-800' \n              : 'bg-green-600 hover:bg-green-700'\n          } disabled:bg-gray-400`}\n        >\n          {isConfirmed ? 'Selection Confirmed âœ“' : 'Confirm Selection'}\n        </button>\n        <button\n          onClick={handleReset}\n          className=\"flex-1 bg-gray-200 text-gray-700 py-3 px-4 rounded-lg hover:bg-gray-300 transition-colors\"\n        >\n          Reset\n        </button>\n      </div>\n\n      {/* Current Selection Display */}\n      {(selectedDate || selectedTime) && (\n        <div className={`${isConfirmed ? 'bg-green-50' : 'bg-gray-50'} p-4 rounded-lg transition-colors`}>\n          <h3 className=\"text-lg font-semibold mb-2\">Current Selection:</h3>\n          <p className=\"text-gray-700\">\n            {selectedDate && selectedTime ? (\n              `${format(selectedDate, 'EEEE, MMMM d, yyyy')} at ${selectedTime}`\n            ) : (\n              'Selection incomplete'\n            )}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { TimeSelection } from './TimeSelection';\nimport { useCartStore } from '../store/cartStore';\n\nconst TimeSelectionPage: React.FC = () => {\n  const navigate = useNavigate();\n  const { items, setCollectionTime } = useCartStore();\n  const [selectedDateTime, setSelectedDateTime] = React.useState<{ date: Date; time: string } | null>(null);\n\n  React.useEffect(() => {\n    if (items.length === 0) {\n      navigate('/');\n    }\n  }, [items, navigate]);\n\n  const handleTimeConfirm = (date: Date, time: string) => {\n    setSelectedDateTime({ date, time });\n    setCollectionTime(date, time);\n    navigate('/checkout');\n  };\n\n  return (\n    <div className=\"max-w-2xl mx-auto\">\n      <h2 className=\"text-2xl font-bold mb-6\">Select Collection Date and Time</h2>\n      \n      <div className=\"bg-white shadow-md rounded-lg mb-8\">\n        <div className=\"p-4 border-b text-gray-600\">\n          We are open every Thursday, Friday, Saturday and Sunday.\n        </div>\n        <TimeSelection onConfirm={handleTimeConfirm} />\n      </div>\n\n      <button\n        onClick={() => navigate('/cart')}\n        className=\"w-full bg-gray-200 text-gray-700 py-4 px-6 rounded-lg text-lg font-semibold hover:bg-gray-300 transition-colors\"\n      >\n        Back to Cart\n      </button>\n    </div>\n  );\n};\n\nexport default TimeSelectionPage;"],"names":["TimeSelection","onConfirm","selectedDate","setSelectedDate","React","selectedTime","setSelectedTime","isConfirmed","setIsConfirmed","settings","useSettingsStore","getTimeSlots","date","slots","openingTime","setHours","setMinutes","closingTime","currentSlot","minimumTime","addMinutes","isAfter","slotTime","format","slotDate","hours","minutes","isDateAvailable","dateStr","dates","now","availableDates","currentDate","daysChecked","day","addDays","handleConfirm","handleReset","jsxs","jsx","isToday","time","available","TimeSelectionPage","navigate","useNavigate","items","setCollectionTime","useCartStore","selectedDateTime","setSelectedDateTime","handleTimeConfirm"],"mappings":"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"}